kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: ha-postgres
spec: 
  replicas: {{ .Values.postgres.clusterSize }}
  updateStrategy:
    type: OnDelete
  selector: 
    matchLabels:
      app: ha-postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app: ha-postgres
    spec:
      serviceAccountName: ha-postgres
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm: 
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: ha-postgres
      initContainers:
        - name: wait-consul-cluster
          image: alpine:3.10
          command:
            - sh
            - -cx
            - |
              while [ $(nslookup {{ .Values.consul.serverService }} 2> /dev/null | grep -c "Address [0-9]:") -ne {{ .Values.consul.clusterSize }} ]; do
                sleep 3s
              done 
      volumes:
        - name: shared
          emptyDir: {}
        - name: haproxy-config
          configMap:
            name: haproxy-config
      containers:
        - name: postgres
          image: {{ .Values.postgres.image.name }}:{{ .Values.postgres.image.tag }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: shared
              mountPath: /shared
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgres.dbName }}
            - name: POSTGRES_USER
              value: {{ .Values.postgres.superuserName }}
            - name: POSTGRES_MASTER_HOST
              value: {{ .Values.postgres.masterService }}
            - name: POSTGRES_MASTER_PORT
              value: {{ .Values.postgres.dbPort | quote }}
            - name: CONTROLLER_MANAGEMENT_PORT
              value: "80"
            - name: PROMOTE_TRIGGER_FILE
              value: /shared/promote
          envFrom:
            - secretRef:
                name: db-passwords
        - name: consul
          image: {{ .Values.consul.image.name }}:{{ .Values.consul.image.tag }}
          args: ["agent", "-retry-join", {{ .Values.consul.serverService | quote }}]
        - name: haproxy
          image: {{ .Values.haproxy.image.name }}:{{ .Values.haproxy.image.tag }}
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy
          ports:
            - name: tcp
              containerPort: {{ .Values.postgres.dbPort }}
        - name: controller
          image: {{ .Values.controller.image.name }}:{{ .Values.controller.image.tag }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef: 
                  fieldPath: status.podIP
            - name: PGDATABASE 
              value: {{ .Values.postgres.dbName }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-passwords
                  key: CONTROLLER_USER_PASSWORD
          args: 
            - --time-step=10
            - --management-port=80
            - --promote-trigger-file=/shared/promote
            - --master-service={{ .Values.postgres.masterService }}
            - --pod-ip=$(POD_IP)
            - --db-port={{ .Values.postgres.dbPort }}
          volumeMounts:
            - name: shared
              mountPath: /shared
          readinessProbe:
            httpGet:
              port: 80
              path: /controller/ready
            failureThreshold: 1
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgres.pvSize }}
        {{- if .Values.storageClassName }}
        {{- if eq "-" .Values.storageClassName }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.storageClassName }}"
        {{- end }}
        {{- end }}