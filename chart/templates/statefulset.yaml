kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: ha-postgres
spec: 
  replicas: {{ .Values.clusterSize }}
  updateStrategy:
    type: OnDelete
  selector: 
    matchLabels:
      app: ha-postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app: ha-postgres
    spec:
      serviceAccountName: ha-postgres
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm: 
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: ha-postgres
      initContainers:
        - name: wait-pgdata-empty
          image: {{ .Values.waitPgDataEmpty.image }}
          volumeMounts:
            - name: postgres-data
              mountPath: /pgdata
          command:
            - sh
            - -c
            - |
              if [ -z "$(find /pgdata -type f -print -quit)" ]; then
                exit 0
              fi
              echo -e "The postgres-data PV is not empty!\nThe cluster admin must decide whether to clean it up before proceeding or not!"
              echo -e "To proceed, please execute:\n  touch /proceed"
              until [ -f proceed ]; do
                sleep 5s
              done
          resources:
            limits:
              cpu: {{ .Values.waitPgDataEmpty.limits.cpu }}
              memory: {{ .Values.waitPgDataEmpty.limits.memory }}
        - name: wait-consul-cluster
          image: {{ .Values.waitConsulCluster.image }}
          command:
            - sh
            - -c
            - |
              apk update
              apk add curl
              until curl -fs -m 1 http://{{ .Values.consul.server.service }}:8500/v1/status/leader | grep -Fq :; do
                sleep 3s
              done 
          resources:
            limits:
              cpu: {{ .Values.waitConsulCluster.limits.cpu }}
              memory: {{ .Values.waitConsulCluster.limits.memory }}
      volumes:
        - name: haproxy-config
          configMap:
            name: haproxy-config
      containers:
        - name: postgres
          image: {{ .Values.postgres.image }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRES_DB
              value: {{ .Values.dbName }}
            - name: POSTGRES_USER
              value: {{ .Values.postgres.users.su.name }}
            - name: POSTGRES_MASTER_HOST
              value: {{ .Values.masterService }}
            - name: POSTGRES_MASTER_PORT
              value: {{ .Values.dbPort | quote }}
            - name: CONTROLLER_MANAGEMENT_PORT
              value: "80"
          envFrom:
            - secretRef:
                name: db-passwords
          resources:
            limits:
              cpu: {{ .Values.postgres.limits.cpu }}
              memory: {{ .Values.postgres.limits.memory }}
        - name: consul
          image: {{ .Values.consul.image }}
          args: ["agent", "-retry-join={{ .Values.consul.server.service }}", "-retry-interval=3s"]
          resources:
            limits:
              cpu: {{ .Values.consul.client.limits.cpu }}
              memory: {{ .Values.consul.client.limits.memory }}
        - name: haproxy
          image: {{ .Values.haproxy.image }}
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy
          ports:
            - name: tcp
              containerPort: {{ .Values.dbPort }}
          resources:
            limits:
              cpu: {{ .Values.haproxy.limits.cpu }}
              memory: {{ .Values.haproxy.limits.memory }}
        - name: controller
          image: {{ .Values.controller.image }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef: 
                  fieldPath: status.podIP
            - name: PGDATABASE 
              value: {{ .Values.dbName }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-passwords
                  key: CONTROLLER_USER_PASSWORD
          args: 
            - --time-step={{ .Values.controller.timeStep }}
            - --management-port=80
            - --master-service={{ .Values.masterService }}
            - --pod-ip=$(POD_IP)
            - --db-port={{ .Values.dbPort }}
          readinessProbe:
            httpGet:
              port: 80
              path: /controller/ready
            failureThreshold: 1
          resources:
            limits:
              cpu: {{ .Values.controller.limits.cpu }}
              memory: {{ .Values.controller.limits.memory }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgres.storage.size }}
        {{- if .Values.postgres.storage.className }}
        {{- if eq "-" .Values.postgres.storage.className }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.postgres.storage.className }}"
        {{- end }}
        {{- end }}