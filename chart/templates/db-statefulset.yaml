kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: ha-postgres
spec: 
  replicas: {{ .Values.db.clusterSize }}
  updateStrategy:
    type: OnDelete
  selector: 
    matchLabels:
      app: ha-postgres
  serviceName: ha-postgres
  template:
    metadata:
      labels:
        app: ha-postgres
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm: 
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: ha-postgres
      volumes:
        - name: user-defined-postgres-init-scripts
          configMap:
            name: user-defined-postgres-init-scripts
      initContainers:
        - name: clean-data
          image: {{ .Values.db.cleanData.image }}
          volumeMounts:
            - name: postgres-data
              mountPath: /pgdata
          env:
            - name: CONSUL_HOST
              value: {{ .Values.consul.server.service }}
            - name: CONSUL_KEY_PREFIX
              value: {{ .Values.db.controller.consulKeyPrefix }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
            - sh
            - -ec
            - |
              echo "Cleaning up Consul keys $CONSUL_KEY_PREFIX/$POD_NAME/* ..."
              while [ "$(curl -fs -X DELETE http://$CONSUL_HOST:8500/v1/kv/$CONSUL_KEY_PREFIX/$POD_NAME?recurse)" != "true" ]; do
                sleep 3s
              done
              if [ -z "$(find /pgdata -type f -print -quit)" ]; then
                exit 0
              fi
              echo "The postgres-data PV is not empty!"
              echo "The cluster admin must decide whether to clean it up before proceeding or not!"
              echo -e "To proceed, please execute:\n  touch /proceed"
              until [ -f proceed ]; do
                sleep 5s
              done
          securityContext:
            runAsUser: 0
          resources:
{{ toYaml .Values.db.cleanData.resources | indent 12 }}
      containers:
        - name: postgres
          image: {{ .Values.db.postgres.image }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: user-defined-postgres-init-scripts
              mountPath: /user-defined-init-scripts
          env:
            - name: POSTGRES_DB
              value: {{ .Values.db.postgres.name }}
            - name: POSTGRES_USER
              value: {{ .Values.db.postgres.users.su.name }}
            - name: POSTGRES_MASTER_HOST
              value: {{ .Values.lb.service }}
            - name: POSTGRES_MASTER_PORT
              value: {{ .Values.lb.masterDbPort | quote }}
            - name: CONTROLLER_MANAGEMENT_PORT
              value: "80"
            {{- range $key, $value := .Values.db.seedDb }}
            {{- if ne $key "password" }}
            - name: SEED_DB_{{ $key | upper }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          envFrom:
            - secretRef:
                name: db-passwords
              prefix: PASSWORD_
          resources:
{{ toYaml .Values.db.postgres.resources | indent 12 }}
        - name: consul
          image: {{ .Values.consul.image }}
          args:
            - agent
            - -retry-join={{ .Values.consul.server.service }}
            - -retry-interval=3s
          resources:
{{ toYaml .Values.consul.client.resources | indent 12 }}
        - name: controller
          image: {{ .Values.db.controller.image }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef: 
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PGDATABASE 
              value: {{ .Values.db.postgres.name }}
          args: 
            {{- with .Values.db.controller }}
            - --consul-key-prefix={{ .consulKeyPrefix }}
            - --check-interval={{ .checkInterval }}
            - --connect-timeout={{ .connectTimeout }}
            - --alive-check-failure-threshold={{ .aliveCheckFailureThreshold }}
            - --standby-replication-check-failure-threshold={{ .standbyReplicationCheckFailureThreshold }}
            - --host-name=$(POD_NAME)
            - --host-ip=$(POD_IP)
            {{- end }}
          readinessProbe:
            httpGet:
              port: 80
              path: /controller/ready
            failureThreshold: 1
          resources:
{{ toYaml .Values.db.controller.resources | indent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes:
          - ReadWriteOnce
        {{- with .Values.db.postgres.storage }}
        resources:
          requests:
            storage: {{ .size }}
        {{- if .className }}
        {{- if eq "-" .className }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .className }}
        {{- end }}
        {{- end }}
        {{- end }}